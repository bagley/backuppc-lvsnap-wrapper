
# These settings are for backuppc-wrapper, and are in perl format, and read 
# using 'do'. You do not have to know perl, as the format is quite simple:
# $setting = "value";

# Any value may be commented out, in which its default value will be used.
# (Default values are usually stated, or at the top of the script). 

# And dont use spaces in file paths. They may work, may not. Keep it simple.

# This file MUST be owned by root and have perms 600 if you are using
# database passwords and/or other sensitive settings.

# To test the script, this is one method you can use (on the same machine as the script)
# First, in a shell, set the SSH_ORIGINAL_COMMAND to the command you want to test
# Keep in mind this command will be run like normal, so be careful
#    export SSH_ORIGINAL_COMMAND="rsync --server --badarg"
# Then run this script with no arguments.
#    /usr/local/bin/backuppc-lvsnap-wrapper
# You will see exactly what ssh will see, and be able to view logs of actions
#    tail /var/log/messages

# File restores are done by putting '--timeout=0' in rsync command. (Thus
# no snapshots or other backup actions).

# SELinux note: BackupPC does not support xattr needed by selinux. 
# However, adding the following to your RestorePostUserCmd will 
# reset the default file context to the restored files (if selinux does 
# not do it itself). Modify as needed.
# $sshPath -q -x -l root $host restorecontext $XferMethod $fileList


########
# Chroot
########

# Where would you like your chroot, where snapshots are mounted/binded?
# Comment out or set to "" to disable chroot/snapshots (default).
#$chroot_dir="/mnt/snapback";

# You need to create snapshots to make a full system. lvsnap is good.
# You may use a different program than lvsnap. Snapshots are created 
# with the argument 'start' and torn down with 'stop'. The chroot
# directory above is created before, and removed (non recursively) afterwards.
# Change $ENV{PATH} below, or set absolute path if needed.
# Default: "lvsnap"
#$snapshot_program="lvsnap";

# Additional check for total number of mounts under the chroot, to see if
# we have actually mounted everything (would be a bad wakeup to find
# your backups actually weren't backing up some partitions/mounts).
# This will also allow backup to proceed even if $snapshot_program returned
# failure, as happens if snapshots were already up (lvsnap).
# A simple way to get this number is start your snapshots, and then run:
# (no final / on chroot dir) 
#   mount | grep [$chroot_dir] | wc -l
# Set to -1 to disable this check (default). Backup will proceed only
# if $snapshot_program succeeds, with no additional checks.
#$mounts_under_chroot=-1;

##########
# Services [ Chroot only ]
##########

# Comma delimited string of services you would like to stop
# before we take the snapshot, and then start right back up.
# They should be down for just a few seconds. This is useful
# for programs whose cache you cannot flush.
# Note that programs must support being started twice, as the
# cleanup func may try to start programs that were already started
# $services = "app1,app2,app3"; 
# Default is to do nothing: $services = "";
#$stop_services="";
#$init="/etc/init.d";

# Run this program before/after creating snapshots. Run as is. Quotes may not work.
# Useful for programs that have a special method of flushing the cache.
# Note that they have to support being run multiple times, and not mess things up.
# (currently we will run post twice, but that allows for TERM during snapshot)
#$pre_snapshot="";
#$post_snapshot="";


###########
# Databases
###########

# (Dumping the database is always supported. Locking is only done in chroot/snapshots).

# mysql and pgsql can either be locked or dumped. If you would like to enable
# locking, set the my/pgsql_dump to 0, and make sure that the perl database
# modules are installed for my/pgsql (perl-DBD-MySQL, perl-DBD-Pg)
# They are only loaded if needed.

# Enable snapshoting of database's disk data without 
# the need to dump, by flushing and locking it.
# Passwords are not visable to 'ps' snooping.
# Use \' if your password contains a "'" -> 'some\'password' 
# MAKE THIS SCRIPT ONLY READABLE BY ROOT

# TODO: ports, other options

# MySQL
# user must have permissions to access/lock all databases
# set user to '' to disable
$mysql_user='';
$mysql_pass='';
# Perform dump? Otherwise (0) we just lock database during 
# lvm snaphot (those few seconds that we actually do the snapshot)
$mysql_dump=1;
# Compress the backup with what program (gzip bzip2 xz)?
# Set to '' for no compression.
$mysql_compress='';
# Where do we save the backup? Add .gz/bz/xz ext if you are using compression
# Whatever is here will be blanked, and perms set to root, 600.
# Setting '' while $pgsql_dump=1 will result in an error.
# And make sure it will be backed up, or all for nothing.
$mysql_dump_file='';


# PgSQL
# This uses pg_dumpall to save the entire database to a file
# For large databases, you may want to use WAL instead, which
# will backup databases outside of BackupPC:
#    http://www.postgresql.org/docs/8.1/static/backup-online.html
# User must have permissions to access all databases. (You may have
# to do ROLES [see pgsql docs] if you do not want to use the superuser).
# set user to '' to disable
$pgsql_user='';
$pgsql_pass='';
# Perform dump? Otherwise (0) we just lock database during 
# lvm snaphot (those few seconds that we actually do the snapshot)
$pgsql_dump=1;
# Compress the backup with what program (gzip bzip2 xz)?
# Set to '' for no compression.
$pgsql_compress='';
# Where do we save the backup? Add .gz/bz/xz ext if you are using compression
# Whatever is here will be blanked, and perms set to root, 600.
# Setting '' while $pgsql_dump=1 will result in an error.
# And make sure it will be backed up, or all for nothing.
$pgsql_dump_file='';


###################
# External Programs
###################

# Due to the checking of the command line, running Pre and Post commands
# is not possible. These commands allow for other commands. You may have
# to change $ENV{PATH} below if they are not in it.

# Run this program/script before everything else (as is).
#$pre_run = "";

# Run this program/script after everything has run (as is).
#$post_run = "";


########
# Checks
########

# RegEx to check against rsync command line. This can be confusing, 
# so may be best to leave it unless you understand it.
#$rsync_regex='';

# Check command line for shell escapes, and other possible exploits.
# This means that if someone has broken access to ssh for root, and is 
# trying to run commands on it, this option will make it harder (hopefully).
# Default is true
#$check_command_line=1;

# You may specify your own regex here
#$check_regex = '[\\\[\]\&\(\)\{\}\;\<\>\$]+';


#######
# PATH
#######

# Path for all run programs (set only if you need it)
#$ENV{PATH}="/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/sbin";

#######
# Debug
#######

# Use debug mode. Shows 'rejected' output instead of nothing, along with some 
# extra messages. BackupPC will know if there is an error (no files transfered),
# so there is little point in showing a reject message. 
# 0 - No rejected message. Unauthorized access is still logged.
# 1 - Display "Rejected" on unauthorized access, and extra messages.
$debug=0;




#######
Finish (leave this so perl will know it loaded the file correctly)
1;
